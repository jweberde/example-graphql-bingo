<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Bingo" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Settings" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Benutzer definierte Variablen" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">localhost</stringProp>
        <stringProp name="HTTPSampler.port">8080</stringProp>
        <stringProp name="HTTPSampler.protocol">http</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <stringProp name="HTTPSampler.path">/bingo/api/graphql</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">false</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">true</boolProp>
      </CacheManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Schleifen-Controller (Loop Controller)" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Authorization" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Basic cGx0OmJpbmdv</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Setup Terms" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{&quot;termPool&quot;:[{&quot;category&quot;:&quot;general&quot;,&quot;terms&quot;:[&quot;zero tolerance&quot;,&quot;Synergistic&quot;,&quot;firmware&quot;,&quot;actuating&quot;,&quot;adapter&quot;,&quot;Cloned&quot;,&quot;zero defect&quot;,&quot;internet solution&quot;,&quot;Cloned&quot;,&quot;ability&quot;,&quot;Universal&quot;,&quot;project&quot;,&quot;real-time&quot;,&quot;web-enabled&quot;,&quot;superstructure&quot;,&quot;leverage&quot;,&quot;composite&quot;,&quot;architecture&quot;,&quot;heuristic&quot;,&quot;hierarchy&quot;,&quot;methodology&quot;,&quot;Phased&quot;,&quot;capability&quot;,&quot;radical&quot;,&quot;User-centric&quot;,&quot;neutral&quot;,&quot;Upgradable&quot;,&quot;Synchronised&quot;,&quot;software&quot;,&quot;Progressive&quot;,&quot;pricing structure&quot;,&quot;architecture&quot;,&quot;throughput&quot;,&quot;analyzer&quot;,&quot;open architecture&quot;,&quot;Robust&quot;,&quot;neural-net&quot;,&quot;3rd generation&quot;,&quot;data-warehouse&quot;,&quot;Inverse&quot;,&quot;capability&quot;,&quot;functionalities&quot;,&quot;Multi-channelled&quot;,&quot;next generation&quot;,&quot;tangible&quot;,&quot;implementation&quot;,&quot;exuding&quot;]},{&quot;category&quot;:&quot;edi&quot;,&quot;terms&quot;:[&quot;strategy&quot;,&quot;extranet&quot;,&quot;Implemented&quot;,&quot;challenge&quot;,&quot;uniform&quot;,&quot;Object-based&quot;,&quot;dynamic&quot;,&quot;groupware&quot;,&quot;Function-based&quot;,&quot;Exclusive&quot;,&quot;Enterprise-wide&quot;,&quot;model&quot;,&quot;Profit-focused&quot;,&quot;Synchronised&quot;,&quot;impactful&quot;,&quot;Team-oriented&quot;,&quot;Pre-emptive&quot;,&quot;Networked&quot;,&quot;Proactive&quot;,&quot;foreground&quot;,&quot;hub&quot;,&quot;access&quot;,&quot;time-frame&quot;,&quot;composite&quot;,&quot;Optional&quot;,&quot;web-enabled&quot;,&quot;human-resource&quot;,&quot;budgetary management&quot;,&quot;structure&quot;,&quot;dedicated&quot;,&quot;strategy&quot;,&quot;Implemented&quot;,&quot;Enterprise-wide&quot;,&quot;alliance&quot;,&quot;directional&quot;,&quot;uniform&quot;,&quot;methodology&quot;,&quot;local&quot;,&quot;instruction set&quot;,&quot;Object-based&quot;,&quot;Operative&quot;,&quot;cohesive&quot;,&quot;Upgradable&quot;,&quot;Polarised&quot;,&quot;client-driven&quot;,&quot;tertiary&quot;,&quot;infrastructure&quot;,&quot;homogeneous&quot;]},{&quot;category&quot;:&quot;fax&quot;,&quot;terms&quot;:[&quot;homogeneous&quot;,&quot;background&quot;,&quot;Switchable&quot;,&quot;multi-tasking&quot;,&quot;Monitored&quot;,&quot;5th generation&quot;,&quot;success&quot;,&quot;eco-centric&quot;,&quot;Reverse-engineered&quot;,&quot;tertiary&quot;,&quot;throughput&quot;,&quot;non-volatile&quot;,&quot;Stand-alone&quot;,&quot;Assimilated&quot;,&quot;architecture&quot;,&quot;protocol&quot;,&quot;Face to face&quot;,&quot;local area network&quot;,&quot;cohesive&quot;,&quot;Configurable&quot;,&quot;product&quot;,&quot;zero defect&quot;,&quot;frame&quot;,&quot;function&quot;,&quot;Phased&quot;,&quot;holistic&quot;,&quot;zero administration&quot;,&quot;synergy&quot;,&quot;firmware&quot;,&quot;explicit&quot;,&quot;Profit-focused&quot;,&quot;Synergistic&quot;,&quot;Decentralized&quot;]},{&quot;category&quot;:&quot;sms&quot;,&quot;terms&quot;:[&quot;Robust&quot;,&quot;functionalities&quot;,&quot;Multi-channelled&quot;,&quot;collaboration&quot;,&quot;Reactive&quot;,&quot;intangible&quot;,&quot;orchestration&quot;,&quot;systematic&quot;,&quot;moratorium&quot;,&quot;4th generation&quot;,&quot;real-time&quot;,&quot;Reverse-engineered&quot;,&quot;intermediate&quot;,&quot;portal&quot;,&quot;Enterprise-wide&quot;,&quot;reciprocal&quot;,&quot;solution&quot;,&quot;Cross-platform&quot;,&quot;hybrid&quot;,&quot;budgetary management&quot;,&quot;tertiary&quot;,&quot;challenge&quot;,&quot;Virtual&quot;,&quot;static&quot;,&quot;impactful&quot;,&quot;Customizable&quot;,&quot;protocol&quot;,&quot;superstructure&quot;,&quot;firmware&quot;,&quot;framework&quot;,&quot;needs-based&quot;,&quot;secondary&quot;,&quot;architecture&quot;,&quot;core&quot;,&quot;Polarised&quot;,&quot;interactive&quot;,&quot;intermediate&quot;,&quot;homogeneous&quot;,&quot;leading edge&quot;,&quot;model&quot;,&quot;open system&quot;,&quot;User-centric&quot;,&quot;background&quot;,&quot;object-oriented&quot;,&quot;Fully-configurable&quot;,&quot;Ergonomic&quot;,&quot;budgetary management&quot;]},{&quot;category&quot;:&quot;emailsec&quot;,&quot;terms&quot;:[&quot;migration&quot;,&quot;explicit&quot;,&quot;optimal&quot;,&quot;motivating&quot;,&quot;Pre-emptive&quot;,&quot;help-desk&quot;,&quot;Face to face&quot;,&quot;moratorium&quot;,&quot;Triple-buffered&quot;,&quot;Adaptive&quot;,&quot;Re-contextualized&quot;,&quot;tangible&quot;,&quot;web-enabled&quot;,&quot;scalable&quot;,&quot;Reactive&quot;,&quot;Phased&quot;,&quot;orchestration&quot;,&quot;Organic&quot;,&quot;methodical&quot;,&quot;interface&quot;,&quot;utilisation&quot;,&quot;methodical&quot;,&quot;approach&quot;,&quot;Implemented&quot;,&quot;system-worthy&quot;,&quot;internet solution&quot;,&quot;Centralized&quot;,&quot;ability&quot;,&quot;well-modulated&quot;,&quot;methodical&quot;,&quot;Multi-channelled&quot;,&quot;dedicated&quot;,&quot;matrix&quot;,&quot;local&quot;,&quot;motivating&quot;,&quot;matrices&quot;,&quot;Team-oriented&quot;,&quot;local&quot;,&quot;directional&quot;,&quot;moratorium&quot;,&quot;attitude-oriented&quot;,&quot;mission-critical&quot;,&quot;even-keeled&quot;,&quot;secondary&quot;]},{&quot;category&quot;:&quot;uiux&quot;,&quot;terms&quot;:[&quot;grid-enabled&quot;,&quot;Distributed&quot;,&quot;incremental&quot;,&quot;disintermediate&quot;,&quot;multi-state&quot;,&quot;systematic&quot;,&quot;infrastructure&quot;,&quot;protocol&quot;,&quot;Operative&quot;,&quot;neutral&quot;,&quot;explicit&quot;,&quot;Organized&quot;,&quot;synergy&quot;,&quot;toolset&quot;,&quot;local&quot;,&quot;Enhanced&quot;,&quot;systemic&quot;,&quot;user-facing&quot;,&quot;Distributed&quot;,&quot;explicit&quot;,&quot;definition&quot;,&quot;knowledge base&quot;,&quot;tertiary&quot;,&quot;high-level&quot;,&quot;Public-key&quot;,&quot;interface&quot;,&quot;task-force&quot;,&quot;Ameliorated&quot;,&quot;open system&quot;,&quot;Inverse&quot;]}]},&quot;query&quot;:&quot;mutation CreatePool ($termPool:   [TermPoolCategoryInput!]!) { \n    admin {\n        updateTermPool(input: {categories: $termPool, replace: true})\n    }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation CreatePool ($termPool:   [TermPoolCategoryInput!]!) { 
    admin {
        updateTermPool(input: {categories: $termPool, replace: true})
    }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{  &quot;termPool&quot;: [    {      &quot;category&quot;: &quot;general&quot;,      &quot;terms&quot;: [        &quot;zero tolerance&quot;,        &quot;Synergistic&quot;,        &quot;firmware&quot;,        &quot;actuating&quot;,        &quot;adapter&quot;,        &quot;Cloned&quot;,        &quot;zero defect&quot;,        &quot;internet solution&quot;,        &quot;Cloned&quot;,        &quot;ability&quot;,        &quot;Universal&quot;,        &quot;project&quot;,        &quot;real-time&quot;,        &quot;web-enabled&quot;,        &quot;superstructure&quot;,        &quot;leverage&quot;,        &quot;composite&quot;,        &quot;architecture&quot;,        &quot;heuristic&quot;,        &quot;hierarchy&quot;,        &quot;methodology&quot;,        &quot;Phased&quot;,        &quot;capability&quot;,        &quot;radical&quot;,        &quot;User-centric&quot;,        &quot;neutral&quot;,        &quot;Upgradable&quot;,        &quot;Synchronised&quot;,        &quot;software&quot;,        &quot;Progressive&quot;,        &quot;pricing structure&quot;,        &quot;architecture&quot;,        &quot;throughput&quot;,        &quot;analyzer&quot;,        &quot;open architecture&quot;,        &quot;Robust&quot;,        &quot;neural-net&quot;,        &quot;3rd generation&quot;,        &quot;data-warehouse&quot;,        &quot;Inverse&quot;,        &quot;capability&quot;,        &quot;functionalities&quot;,        &quot;Multi-channelled&quot;,        &quot;next generation&quot;,        &quot;tangible&quot;,        &quot;implementation&quot;,        &quot;exuding&quot;      ]    },    {      &quot;category&quot;: &quot;edi&quot;,      &quot;terms&quot;: [        &quot;strategy&quot;,        &quot;extranet&quot;,        &quot;Implemented&quot;,        &quot;challenge&quot;,        &quot;uniform&quot;,        &quot;Object-based&quot;,        &quot;dynamic&quot;,        &quot;groupware&quot;,        &quot;Function-based&quot;,        &quot;Exclusive&quot;,        &quot;Enterprise-wide&quot;,        &quot;model&quot;,        &quot;Profit-focused&quot;,        &quot;Synchronised&quot;,        &quot;impactful&quot;,        &quot;Team-oriented&quot;,        &quot;Pre-emptive&quot;,        &quot;Networked&quot;,        &quot;Proactive&quot;,        &quot;foreground&quot;,        &quot;hub&quot;,        &quot;access&quot;,        &quot;time-frame&quot;,        &quot;composite&quot;,        &quot;Optional&quot;,        &quot;web-enabled&quot;,        &quot;human-resource&quot;,        &quot;budgetary management&quot;,        &quot;structure&quot;,        &quot;dedicated&quot;,        &quot;strategy&quot;,        &quot;Implemented&quot;,        &quot;Enterprise-wide&quot;,        &quot;alliance&quot;,        &quot;directional&quot;,        &quot;uniform&quot;,        &quot;methodology&quot;,        &quot;local&quot;,        &quot;instruction set&quot;,        &quot;Object-based&quot;,        &quot;Operative&quot;,        &quot;cohesive&quot;,        &quot;Upgradable&quot;,        &quot;Polarised&quot;,        &quot;client-driven&quot;,        &quot;tertiary&quot;,        &quot;infrastructure&quot;,        &quot;homogeneous&quot;      ]    },    {      &quot;category&quot;: &quot;fax&quot;,      &quot;terms&quot;: [        &quot;homogeneous&quot;,        &quot;background&quot;,        &quot;Switchable&quot;,        &quot;multi-tasking&quot;,        &quot;Monitored&quot;,        &quot;5th generation&quot;,        &quot;success&quot;,        &quot;eco-centric&quot;,        &quot;Reverse-engineered&quot;,        &quot;tertiary&quot;,        &quot;throughput&quot;,        &quot;non-volatile&quot;,        &quot;Stand-alone&quot;,        &quot;Assimilated&quot;,        &quot;architecture&quot;,        &quot;protocol&quot;,        &quot;Face to face&quot;,        &quot;local area network&quot;,        &quot;cohesive&quot;,        &quot;Configurable&quot;,        &quot;product&quot;,        &quot;zero defect&quot;,        &quot;frame&quot;,        &quot;function&quot;,        &quot;Phased&quot;,        &quot;holistic&quot;,        &quot;zero administration&quot;,        &quot;synergy&quot;,        &quot;firmware&quot;,        &quot;explicit&quot;,        &quot;Profit-focused&quot;,        &quot;Synergistic&quot;,        &quot;Decentralized&quot;      ]    },    {      &quot;category&quot;: &quot;sms&quot;,      &quot;terms&quot;: [        &quot;Robust&quot;,        &quot;functionalities&quot;,        &quot;Multi-channelled&quot;,        &quot;collaboration&quot;,        &quot;Reactive&quot;,        &quot;intangible&quot;,        &quot;orchestration&quot;,        &quot;systematic&quot;,        &quot;moratorium&quot;,        &quot;4th generation&quot;,        &quot;real-time&quot;,        &quot;Reverse-engineered&quot;,        &quot;intermediate&quot;,        &quot;portal&quot;,        &quot;Enterprise-wide&quot;,        &quot;reciprocal&quot;,        &quot;solution&quot;,        &quot;Cross-platform&quot;,        &quot;hybrid&quot;,        &quot;budgetary management&quot;,        &quot;tertiary&quot;,        &quot;challenge&quot;,        &quot;Virtual&quot;,        &quot;static&quot;,        &quot;impactful&quot;,        &quot;Customizable&quot;,        &quot;protocol&quot;,        &quot;superstructure&quot;,        &quot;firmware&quot;,        &quot;framework&quot;,        &quot;needs-based&quot;,        &quot;secondary&quot;,        &quot;architecture&quot;,        &quot;core&quot;,        &quot;Polarised&quot;,        &quot;interactive&quot;,        &quot;intermediate&quot;,        &quot;homogeneous&quot;,        &quot;leading edge&quot;,        &quot;model&quot;,        &quot;open system&quot;,        &quot;User-centric&quot;,        &quot;background&quot;,        &quot;object-oriented&quot;,        &quot;Fully-configurable&quot;,        &quot;Ergonomic&quot;,        &quot;budgetary management&quot;      ]    },    {      &quot;category&quot;: &quot;emailsec&quot;,      &quot;terms&quot;: [        &quot;migration&quot;,        &quot;explicit&quot;,        &quot;optimal&quot;,        &quot;motivating&quot;,        &quot;Pre-emptive&quot;,        &quot;help-desk&quot;,        &quot;Face to face&quot;,        &quot;moratorium&quot;,        &quot;Triple-buffered&quot;,        &quot;Adaptive&quot;,        &quot;Re-contextualized&quot;,        &quot;tangible&quot;,        &quot;web-enabled&quot;,        &quot;scalable&quot;,        &quot;Reactive&quot;,        &quot;Phased&quot;,        &quot;orchestration&quot;,        &quot;Organic&quot;,        &quot;methodical&quot;,        &quot;interface&quot;,        &quot;utilisation&quot;,        &quot;methodical&quot;,        &quot;approach&quot;,        &quot;Implemented&quot;,        &quot;system-worthy&quot;,        &quot;internet solution&quot;,        &quot;Centralized&quot;,        &quot;ability&quot;,        &quot;well-modulated&quot;,        &quot;methodical&quot;,        &quot;Multi-channelled&quot;,        &quot;dedicated&quot;,        &quot;matrix&quot;,        &quot;local&quot;,        &quot;motivating&quot;,        &quot;matrices&quot;,        &quot;Team-oriented&quot;,        &quot;local&quot;,        &quot;directional&quot;,        &quot;moratorium&quot;,        &quot;attitude-oriented&quot;,        &quot;mission-critical&quot;,        &quot;even-keeled&quot;,        &quot;secondary&quot;      ]    },    {      &quot;category&quot;: &quot;uiux&quot;,      &quot;terms&quot;: [        &quot;grid-enabled&quot;,        &quot;Distributed&quot;,        &quot;incremental&quot;,        &quot;disintermediate&quot;,        &quot;multi-state&quot;,        &quot;systematic&quot;,        &quot;infrastructure&quot;,        &quot;protocol&quot;,        &quot;Operative&quot;,        &quot;neutral&quot;,        &quot;explicit&quot;,        &quot;Organized&quot;,        &quot;synergy&quot;,        &quot;toolset&quot;,        &quot;local&quot;,        &quot;Enhanced&quot;,        &quot;systemic&quot;,        &quot;user-facing&quot;,        &quot;Distributed&quot;,        &quot;explicit&quot;,        &quot;definition&quot;,        &quot;knowledge base&quot;,        &quot;tertiary&quot;,        &quot;high-level&quot;,        &quot;Public-key&quot;,        &quot;interface&quot;,        &quot;task-force&quot;,        &quot;Ameliorated&quot;,        &quot;open system&quot;,        &quot;Inverse&quot;      ]    }  ]}</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Player" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Schleifen-Controller (Loop Controller)" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">400</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">0</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">PLAYER_INDEX</stringProp>
          <stringProp name="CounterConfig.format">0000</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Player Global" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">log.info(&quot;THREAD:&quot;+ Thread.currentThread().getName())
vars.put(&quot;PLAYER&quot;, &quot;User &quot;+vars.get(&quot;PLAYER_INDEX&quot;))</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1. CreateCard" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument" enabled="true">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{&quot;player&quot;:&quot;${PLAYER}&quot;},&quot;query&quot;:&quot;mutation newCard($player:String!) { \n  createCard(input: { owner: $player}) {\n    cardId\n    createdAt\n    cardOwner\n    terms {\n\tcheckId\n\tvalue\n    }\n  }\n}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
          <stringProp name="GraphQLHTTPSampler.query">mutation newCard($player:String!) { 
  createCard(input: { owner: $player}) {
    cardId
    createdAt
    cardOwner
    terms {
	checkId
	value
    }
  }
}
</stringProp>
          <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;player&quot; : &quot;${PLAYER}&quot;
}
</stringProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CreateCardExtractor - ${PLAYER}" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">CARD_ID;CARD_OWNER;CARD_TERMS</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.createCard.cardId;$.data.createCard.cardOwner;$.data.createCard.terms</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">null;null;null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="After Create" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">15</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Term Property" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">log.info(&quot;THREAD: &quot;+ Thread.currentThread().getName())
log.info(&quot;CARD_ID: &quot;+ vars.get(&quot;CARD_ID&quot;))
log.info(&quot;CARD_TERMS: &quot;+ vars.get(&quot;CARD_TERMS&quot;))


def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(vars.get(&quot;CARD_TERMS&quot;))

def random = new java.security.SecureRandom()

def randomIndex = random.nextInt(object.size())
vars.put(&quot;CHECK_ID&quot;, object.get(randomIndex).get(&quot;checkId&quot;))
vars.put(&quot;CHECK_ID_VALUE&quot;, object.get(randomIndex).get(&quot;value&quot;))
vars.put(&quot;CHECK_VALUE&quot;, &quot;&quot;+(random.nextInt(101) &gt; 20))


log.info(&quot;CHECK_ID: &quot;+ vars.get(&quot;CHECK_ID&quot;))
log.info(&quot;CHECK_ID_VALUE: &quot;+ vars.get(&quot;CHECK_ID_VALUE&quot;))

</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="After Term" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">500</stringProp>
            <stringProp name="RandomTimer.range">1000.0</stringProp>
          </UniformRandomTimer>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If-Controller-Checked" enabled="true">
            <stringProp name="IfController.condition">${__jexl3(&quot;${CHECK_VALUE}&quot; == &quot;true&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Set CHECKED" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{&quot;input&quot;:{&quot;cardId&quot;:&quot;${CARD_ID}&quot;,&quot;checkId&quot;:&quot;${CHECK_ID}&quot;,&quot;checked&quot;:true}},&quot;query&quot;:&quot;mutation updateCheck($input: CardCheck!){\n  check(input: $input)\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
              <stringProp name="GraphQLHTTPSampler.query">mutation updateCheck($input: CardCheck!){
  check(input: $input)
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;input&quot; : {
		&quot;cardId&quot; : &quot;${CARD_ID}&quot;,
		&quot;checkId&quot; : &quot;${CHECK_ID}&quot;,
		&quot;checked&quot; : true
	}
}
</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="RespTimeGraph.interval">1000</stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If-Controller-Unchecked" enabled="true">
            <stringProp name="IfController.condition">${__jexl3(&quot;${CHECK_VALUE}&quot; != &quot;true&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Set UNCHECKED" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{&quot;input&quot;:{&quot;cardId&quot;:&quot;${CARD_ID}&quot;,&quot;checkId&quot;:&quot;${CHECK_ID}&quot;,&quot;checked&quot;:false}},&quot;query&quot;:&quot;mutation updateCheck($input: CardCheck!){\n  check(input: $input)\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName"></stringProp>
              <stringProp name="GraphQLHTTPSampler.query">mutation updateCheck($input: CardCheck!){
  check(input: $input)
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;input&quot; : {
		&quot;cardId&quot; : &quot;${CARD_ID}&quot;,
		&quot;checkId&quot; : &quot;${CHECK_ID}&quot;,
		&quot;checked&quot; : false
	}
}
</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="RespTimeGraph.interval">1000</stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="RespTimeGraph.interval">500</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
